import React, { useEffect, useRef } from "react";

// Helper to shuffle an array
function shuffle<T>(array: T[]): T[] {
  const arr = array.slice();
  for (let i = arr.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [arr[i], arr[j]] = [arr[j], arr[i]];
  }
  return arr;
}

const baseDelays = [
  0, 0.05, 0.10, 0.15, 0.20, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50, 0.55, 0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95
];

const pathData = [
  { d: "M-7.578947,255.539654c149.453144,90.984009,808.944801,10.498155,623.907573-73.487085s253.83312-186.633866,424.636714-85.151701-30.839539,137.642476,187.4095,219.294792-97.263159-330.10865,612.046213-183.134481", stroke: "rgba(60,170,160,0.5)" },
  { d: "M-8.922947,258.296707c148.83683,90.505776,806.147523,4.316429,621.873351-79.227363s248.477183-184.399716,418.576417-83.450967-43.819453,146.178431,173.52957,227.401563-64.363661-324.335569,642.020662-178.133932", stroke: "rgba(59,169,161,0.525)" },
  { d: "M-10.266947,261.028912c148.230803,90.032725,803.401542-1.800654,619.877691-84.907785s243.17381-182.189299,412.580441-81.768182-56.694753,154.625433,159.769278,235.424033-31.735509-318.623505,671.77259-173.186027", stroke: "rgba(57,169,162,0.553)" },
  { d: "M-11.610947,263.795343c147.634808,89.596385,800.705586-7.856914,617.919633-90.56127s237.921696-180.065761,406.647192-80.131331-69.468037,163.042448,146.125653,243.44946.628033-313.081933,701.307523-168.34931", stroke: "rgba(56,168,163,0.58)" },
  { d: "M-12.954947,266.589471c147.048599,89.191716,798.058422-13.85902,615.998252-96.189834s232.719579-178.017517,400.77512-78.534449-82.141815,171.431051,132.595823,251.474898s32.733484-307.688549,730.630805-163.609624", stroke: "rgba(55,168,164,0.604)" },
  { d: "M-14.298947,269.404688c146.471935,88.813847,795.458858-19.812319,614.112652-101.794332s227.566239-176.0336,394.962736-76.972001-94.718519,179.791108,119.177008,259.495843s64.587148-302.422536,759.747605-158.954014", stroke: "rgba(53,167,165,0.63)" },
  { d: "M-15.642947,272.23591c145.904586,88.459057,792.90574-25.721172,612.261965-107.375685s222.460492-174.105569,389.208591-75.439698-107.2005,188.122926,105.866516,267.509259s96.195125-297.267793,788.662928-154.372394", stroke: "rgba(52,167,166,0.66)" },
  { d: "M-16.986947,275.078685c145.346329,88.124065,790.397952-31.589089,610.445354-112.93438s217.401195-172.226059,383.511285-73.933832-119.590037,196.426283,92.661746,275.511983s127.563321-292.210364,817.381615-149.856103", stroke: "rgba(51,166,167,0.682)" },
  { d: "M-18.330947,277.92904c144.796945,87.806156,787.934415-37.418931,608.662006-118.470767s212.387241-170.388971,377.869464-72.451335-131.889334,204.700915,79.560176,283.501311s158.697452-287.238702,845.908354-145.397988", stroke: "rgba(49,166,168,0.71)" },
  { d: "M-19.674947,280.784323c144.256225,87.503259,785.51408-43.213148,606.911132-123.985387s207.417556-168.589613,372.281814-70.989824-144.100522,212.947034,66.559365,291.4756s189.603057-282.34385,874.247688-140.992431", stroke: "rgba(48,165,169,0.737)" },
  { d: "M-21.018947,283.643337c143.723968,87.214036,783.135933-48.974036,605.191973-129.4793s202.491102-166.824797,366.747065-69.547603-156.225672,221.16585,53.656949,299.434857s220.285497-277.519535,902.404014-136.635323", stroke: "rgba(47,165,171,0.765)" },
  { d: "M-22.362947,286.50344c143.199973,86.936736,780.798993-54.703269,603.503787-134.952563s197.606872-165.090632,361.263984-68.122734-168.266788,229.356941,40.850635,307.377088s250.749973-272.758434,930.381594-132.32217", stroke: "rgba(46,164,172,0.79)" },
  { d: "M-23.706947,289.363355C118.977104,376.033557,754.79536,228.96089,578.138914,148.957626s192.76389-163.384443,355.831377-66.713832-180.225811,237.520801,28.138203,315.301752s281.001518-268.05538,958.18456-128.049669", stroke: "rgba(44,164,173,0.816)" },
  { d: "M-25.050947,292.223288C117.125071,378.637197,751.194004,226.149885,575.166552,146.3832s187.96121-161.704796,350.448088-65.320052-192.104626,245.659231,15.517497,323.210175s311.04502-263.407319,985.816916-123.815621", stroke: "rgba(43,163,174,0.843)" },
  { d: "M-26.394947,295.081094c141.675691,86.166534,774.026031-71.717069,598.61803-151.255408s183.197916-160.048814,345.112992-63.939988-203.905054,253.771491,2.986434,331.100432s340.885209-258.808919,1013.282544-119.616825", stroke: "rgba(42,163,175,0.867)" },
  { d: "M-27.349458,297.945994c141.517031,86.246436,773.648881-79.128214,596.587924-157.88976s179.083147-156.322711,339.842074-61.840959-215.639702,255.078446-9.457488,335.008153s370.545295-245.735769,1040.637491-114.100924", stroke: "rgba(40,162,176,0.894)" },
  { d: "M-29.082947,300.483101c140.697474,85.597603,769.700051-82.832143,595.503178-161.845316s173.785948-156.621667,334.58306-61.147416-227.277787,269.610503-21.814808,346.428866s399.973887-249.462145,1067.72857-111.189093", stroke: "rgba(39,162,177,0.92)" },
  { d: "M-30.426947,303.64045c140.219249,85.472874,767.591332-88.497299,593.986546-167.395337s169.135575-155.209973,329.386146-59.874844-238.853477,277.96217-34.088858,354.668595s429.231154-245.285232,1094.716165-107.213666", stroke: "rgba(38,161,178,0.95)" },
  { d: "M-31.770947,306.4874c139.748067,85.255919,765.517728-94.043836,592.496311-172.741607s164.521186-153.635538,324.233262-58.542398-250.357554,285.978956-46.281011,362.490678s458.302676-240.8589,1121.551438-103.137801", stroke: "rgba(36,161,179,0.973)" },
  { d: "M-33.114947,309.331257C106.168824,394.37676,730.363522,209.7626,557.916947,131.259059s159.941987-152.078804,319.12344-57.220359-261.791587,293.973954-58.393063,370.296841s487.192525-236.47011,1148.237729-99.088914", stroke: "#23a0b4" }
];

type HeroLineComponentProps = { className?: string };
const HeroLineComponent: React.FC<HeroLineComponentProps> = ({ className }) => {
  // Shuffle delays for random animation order
  const shuffledDelays = useRef<number[]>(shuffle(baseDelays));
  const pathRefs = useRef<(SVGPathElement | null)[]>([]);

  useEffect(() => {
    pathRefs.current.forEach((path, i) => {
      if (path) {
        const length = path.getTotalLength();
        path.style.strokeDasharray = length.toString();
        path.style.strokeDashoffset = length.toString();
        path.style.animation = `drawLine 2.5s ease forwards`;
        path.style.animationDelay = `${shuffledDelays.current[i]}s`;
      }
    });
  }, []);

  return (
    <div className={className ? className : "fixed top-0 left-0 w-screen bg-white p-0 m-0 overflow-x-hidden z-10 mt-24"}>
      <div className="w-screen p-0 m-0 bg-gradient-to-r from-gray-800 via-gray-700 to-gray-900">
        <svg id="eFiUB30wLJj1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1600 500" shapeRendering="geometricPrecision" textRendering="geometricPrecision" width="100vw" height="600" style={{ display: "block" }}>
          {pathData.map((path, i) => (
            <path
              key={i}
              ref={el => { pathRefs.current[i] = el; }}
              d={path.d}
              fill="rgba(0,0,0,0)"
              stroke={path.stroke}
              strokeWidth="1.5"
            />
          ))}
        </svg>
        <style>{`
          @keyframes drawLine {
            to {
              stroke-dashoffset: 0;
            }
          }
        `}</style>
      </div>
    </div>
  );
};

export default HeroLineComponent;
